import configparser
import telebot
from telebot import types
import random
import psycopg2
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
configparser = configparser.ConfigParser()
configparser.read("settings.ini")

# –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
Token = configparser["Conf_Data"]["Token"]
db_name = configparser["Conf_Data"]["Database"]
username = configparser["Conf_Data"]["User"]
db_password = configparser["Conf_Data"]["Password"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(Token)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–ª–æ–≤
user_word_history = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def connect_db():
    conn = psycopg2.connect(
        database=db_name,
        user=username,
        password=db_password
    )
    return conn

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users(
                user_id BIGINT PRIMARY KEY,
                user_name TEXT NOT NULL,
                chat_id BIGINT NOT NULL UNIQUE
                );
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS words(
                word_id SERIAL PRIMARY KEY,
                russian_word TEXT NOT NULL,
                english_translation TEXT NOT NULL
                );
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_word(
                user_word_id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                word_id INTEGER REFERENCES words(word_id),
                UNIQUE (user_id, word_id)
                );
            """)
            conn.commit()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–ª–æ–≤–∞–º–∏
def fill_words_DB():
    initial_words = [
        ("–Ø", 'I'),
        ("–¢—ã", 'You'),
        ("–ú—ã", 'We'),
        ("–ü—Ä–∏–≤–µ—Ç", 'Hello'),
        ("–ò–º—è", 'Name'),
        ("–§–∞–º–∏–ª–∏—è", 'Last name'),
        ("–°—Ç—É–¥–µ–Ω—Ç", 'Student'),
        ("–†–∞–±–æ—Ç–∞—Ç—å", 'To work'),
        ("–ö—Ä–∞—Å–∏–≤—ã–π", 'Beautiful'),
        ("–í—Ä–µ–º—è", 'Time')
    ]
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.executemany("""
                INSERT INTO words (russian_word, english_translation)
                VALUES (%s, %s);
            """, initial_words)
            conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    chat_id = message.chat.id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø–æ chat_id
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users (user_id, user_name, chat_id)
                VALUES (%s, %s, %s)
                ON CONFLICT (chat_id) DO NOTHING;
            """, (user_id, user_name, chat_id))
            conn.commit()

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    quiz_btn = types.KeyboardButton('–ö–≤–∏–∑')
    btn_add_word = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    btn_del_word = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
    markup.add(quiz_btn, btn_add_word, btn_del_word)

    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–≤–∏–∑"
@bot.message_handler(func=lambda message: message.text == '–ö–≤–∏–∑')
def start_quiz(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_word_history:
        user_word_history[user_id] = []

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT word_id, russian_word, english_translation
                FROM words
                WHERE word_id NOT IN (
                    SELECT word_id FROM user_word 
                    WHERE user_id = %s
                )
                ORDER BY RANDOM() LIMIT 1;
            """, (user_id,))
            word_data = cur.fetchone()
            
            if word_data:
                word_id, russian_word, correct_translation = word_data
                user_word_history[user_id].append((word_id, russian_word, correct_translation))

                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
                cur.execute("""
                    SELECT english_translation
                    FROM words
                    WHERE english_translation != %s 
                    ORDER BY RANDOM() LIMIT 3;
                """, (correct_translation,))
                wrong_translations = [row[0] for row in cur.fetchall()]
                
                # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                options = wrong_translations + [correct_translation]
                random.shuffle(options)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                for option in options:
                    markup.add(types.KeyboardButton(option))
                markup.add(types.KeyboardButton('–î–∞–ª—å—à–µ'), types.KeyboardButton('–ù–∞–∑–∞–¥'))

                bot.send_message(chat_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {russian_word}?", reply_markup=markup)
                bot.register_next_step_handler(
                    message, 
                    lambda msg: check_answer(msg, word_id, correct_translation)
                )
            else:
                bot.send_message(chat_id, "–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_word.")

def check_answer(message, word_id, correct_translation):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_answer = message.text

    if user_answer == correct_translation:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–ª–æ–≤–æ
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO user_word (user_id, word_id)
                    VALUES (%s, %s)
                    ON CONFLICT DO NOTHING;
                """, (user_id, word_id))
                conn.commit()

        bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")

    elif user_answer == '–î–∞–ª—å—à–µ':
        start_quiz(message)
    elif user_answer == '–ù–∞–∑–∞–¥':
        if user_id in user_word_history and len(user_word_history[user_id]) > 0:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            user_word_history[user_id].pop()
            if len(user_word_history[user_id]) > 0:
                # –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ
                prev_word = user_word_history[user_id][-1]
                ask_question(message.chat.id, prev_word[0], prev_word[1], prev_word[2])
            else:
                bot.send_message(chat_id, "‚èÆ –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª–æ–≤")
        else:
            bot.send_message(chat_id, "‚èÆ –ò—Å—Ç–æ—Ä–∏—è —Å–ª–æ–≤ –ø—É—Å—Ç–∞")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

def ask_question(chat_id, word_id, russian_word, correct_translation):
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT english_translation
                FROM words
                WHERE english_translation != %s 
                ORDER BY RANDOM() LIMIT 3;
            """, (correct_translation,))
            wrong_translations = [row[0] for row in cur.fetchall()]
            
            options = wrong_translations + [correct_translation]
            random.shuffle(options)

            markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            for option in options:
                markup.add(types.KeyboardButton(option))
            markup.add(types.KeyboardButton('–î–∞–ª—å—à–µ'), types.KeyboardButton('–ù–∞–∑–∞–¥'))

            bot.send_message(chat_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ {russian_word}?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def add_word(message):
    msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: –º–∞—à–∏–Ω–∞-car):")
    bot.register_next_step_handler(msg, process_add_word)

def process_add_word(message):
    try:
        russian_word, english_translation = message.text.split('-')
        with connect_db() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO words (russian_word, english_translation)
                    VALUES (%s, %s);
                """, (russian_word.strip(), english_translation.strip()))
                conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def delete_word(message):
    msg = bot.send_message(message.chat.id, "üóë –í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_delete_word)

def process_delete_word(message):
    user_id = message.from_user.id
    russian_word = message.text.strip()

    try:
        with connect_db() as conn:
            with conn.cursor() as cur:
                # –ù–∞—Ö–æ–¥–∏–º ID —Å–ª–æ–≤–∞
                cur.execute("""
                    SELECT word_id FROM words 
                    WHERE russian_word = %s;
                """, (russian_word,))
                word_data = cur.fetchone()

                if word_data:
                    word_id = word_data[0]
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–ª–æ–≤–æ
                    cur.execute("""
                        DELETE FROM user_word 
                        WHERE user_id = %s AND word_id = %s;
                    """, (user_id, word_id))
                    conn.commit()
                    bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{russian_word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞!")
                else:
                    bot.send_message(message.chat.id, f"‚ö†Ô∏è –°–ª–æ–≤–æ '{russian_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
  
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)